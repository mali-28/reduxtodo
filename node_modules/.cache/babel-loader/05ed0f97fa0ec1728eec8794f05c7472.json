{"ast":null,"code":"const initialData = {\n  list: []\n};\n\nconst todoReduce = (state = initialData, action) => {\n  switch (action.type) {\n    case 'Add-Todo':\n      const {\n        id,\n        data,\n        toggle,\n        newid\n      } = action.payload;\n\n      if (toggle && data) {\n        console.log(\"in if\");\n        return { ...state,\n          list: [...state.list, {\n            id: id,\n            data: data\n          }]\n        };\n      } else if (!toggle) {\n        console.log(\"in else\", newid);\n        const newList = state.list.map(elem => {\n          console.log(\"elem\", elem);\n\n          if (elem.id === newid) {\n            return {\n              data: data\n            };\n          }\n\n          return elem;\n        });\n        console.log(\"new list\");\n        return { ...state,\n          list: newList\n        }; // state.list.map((elem) =>{\n        //     if(elem.id === newid){\n        //     return {...state, list : [...state.list, {data : data}]  \n        //         }\n        //     }\n        // })\n\n        state.list.map(elem => {\n          if (elem.id === newid) {\n            return {\n              data: data\n            };\n          }\n        });\n      } else {\n        return {\n          list: [...state.list]\n        };\n      }\n\n    case 'remove-Todo':\n      const newList = state.list.filter(elem => elem.id !== action.id);\n      return { ...state,\n        list: newList\n      };\n\n    case 'remove-List':\n      return { ...state,\n        list: []\n      };\n\n    case 'Edit-Todo':\n      let index = action.index;\n      const editItem = state.list.find(elem => {\n        return elem.id === index;\n      });\n      return { ...state,\n        newId: editItem.id\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todoReduce;","map":{"version":3,"sources":["E:/reactJs/reduxTodo/src/reduces/todoReducer.js"],"names":["initialData","list","todoReduce","state","action","type","id","data","toggle","newid","payload","console","log","newList","map","elem","filter","index","editItem","find","newId"],"mappings":"AAAA,MAAMA,WAAW,GAAG;AAChBC,EAAAA,IAAI,EAAE;AADU,CAApB;;AAIA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGH,WAAT,EAAsBI,MAAtB,KAAiC;AAChD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAK,UAAL;AAEI,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA,IAAN;AAAYC,QAAAA,MAAZ;AAAoBC,QAAAA;AAApB,UAA8BL,MAAM,CAACM,OAA3C;;AACA,UAAIF,MAAM,IAAID,IAAd,EAAoB;AAChBI,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,eAAO,EAAE,GAAGT,KAAL;AAAYF,UAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAgB;AAAEK,YAAAA,EAAE,EAAEA,EAAN;AAAUC,YAAAA,IAAI,EAAEA;AAAhB,WAAhB;AAAlB,SAAP;AACH,OAHD,MAGO,IAAI,CAACC,MAAL,EAAa;AAChBG,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAvB;AACA,cAAMI,OAAO,GAAGV,KAAK,CAACF,IAAN,CAAWa,GAAX,CAAgBC,IAAD,IAAU;AACrCJ,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBG,IAApB;;AACA,cAAIA,IAAI,CAACT,EAAL,KAAYG,KAAhB,EAAuB;AACnB,mBAAO;AAAEF,cAAAA,IAAI,EAAEA;AAAR,aAAP;AACH;;AACD,iBAAOQ,IAAP;AACH,SANe,CAAhB;AASAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,eAAO,EACH,GAAGT,KADA;AACOF,UAAAA,IAAI,EAAEY;AADb,SAAP,CAZgB,CAiBhB;AACA;AACA;AACA;AACA;AACA;;AAEAV,QAAAA,KAAK,CAACF,IAAN,CAAWa,GAAX,CAAgBC,IAAD,IAAU;AACrB,cAAIA,IAAI,CAACT,EAAL,KAAYG,KAAhB,EAAuB;AACnB,mBAAO;AAAEF,cAAAA,IAAI,EAAEA;AAAR,aAAP;AAEH;AACJ,SALD;AAQH,OAhCM,MAgCA;AAAE,eAAO;AAAEN,UAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV;AAAR,SAAP;AAAmC;;AAMhD,SAAK,aAAL;AACI,YAAMY,OAAO,GAAGV,KAAK,CAACF,IAAN,CAAWe,MAAX,CAAmBD,IAAD,IAAUA,IAAI,CAACT,EAAL,KAAYF,MAAM,CAACE,EAA/C,CAAhB;AACA,aAAO,EACH,GAAGH,KADA;AAEHF,QAAAA,IAAI,EAAEY;AAFH,OAAP;;AAKJ,SAAK,aAAL;AACI,aAAO,EACH,GAAGV,KADA;AAEHF,QAAAA,IAAI,EAAE;AAFH,OAAP;;AAKJ,SAAK,WAAL;AAEI,UAAIgB,KAAK,GAAGb,MAAM,CAACa,KAAnB;AACA,YAAMC,QAAQ,GAAGf,KAAK,CAACF,IAAN,CAAWkB,IAAX,CAAiBJ,IAAD,IAAU;AAAE,eAAOA,IAAI,CAACT,EAAL,KAAYW,KAAnB;AAA0B,OAAtD,CAAjB;AAGA,aAAO,EACH,GAAGd,KADA;AAEHiB,QAAAA,KAAK,EAAEF,QAAQ,CAACZ;AAFb,OAAP;;AAMJ;AAAS,aAAOH,KAAP;AAvEb;AAyEH,CA1ED;;AA2EA,eAAeD,UAAf","sourcesContent":["const initialData = {\r\n    list: []\r\n};\r\n\r\nconst todoReduce = (state = initialData, action) => {\r\n    switch (action.type) {\r\n\r\n        case 'Add-Todo':\r\n\r\n            const { id, data, toggle, newid } = action.payload;\r\n            if (toggle && data) {\r\n                console.log(\"in if\");\r\n                return { ...state, list: [...state.list, { id: id, data: data, }] }\r\n            } else if (!toggle) {\r\n                console.log(\"in else\", newid);\r\n                const newList = state.list.map((elem) => {\r\n                    console.log(\"elem\", elem)\r\n                    if (elem.id === newid) {\r\n                        return { data: data }\r\n                    }\r\n                    return elem;\r\n                }\r\n                )\r\n\r\n                console.log(\"new list\")\r\n                return {\r\n                    ...state, list: newList\r\n                }\r\n\r\n\r\n                // state.list.map((elem) =>{\r\n                //     if(elem.id === newid){\r\n                //     return {...state, list : [...state.list, {data : data}]  \r\n                //         }\r\n                //     }\r\n                // })\r\n\r\n                state.list.map((elem) => {\r\n                    if (elem.id === newid) {\r\n                        return { data: data }\r\n\r\n                    }\r\n                })\r\n\r\n\r\n            } else { return { list: [...state.list] }; }\r\n\r\n\r\n\r\n\r\n\r\n        case 'remove-Todo':\r\n            const newList = state.list.filter((elem) => elem.id !== action.id);\r\n            return {\r\n                ...state,\r\n                list: newList,\r\n            };\r\n\r\n        case 'remove-List':\r\n            return {\r\n                ...state,\r\n                list: []\r\n            }\r\n\r\n        case 'Edit-Todo':\r\n\r\n            let index = action.index;\r\n            const editItem = state.list.find((elem) => { return elem.id === index });\r\n\r\n\r\n            return {\r\n                ...state,\r\n                newId: editItem.id,\r\n            }\r\n\r\n\r\n        default: return state\r\n    }\r\n}\r\nexport default todoReduce;"]},"metadata":{},"sourceType":"module"}